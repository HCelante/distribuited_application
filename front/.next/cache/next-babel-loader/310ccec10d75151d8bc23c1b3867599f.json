{"ast":null,"code":"import _regeneratorRuntime from \"/home/hcelante/workingon/distribuited_application/front/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/hcelante/workingon/distribuited_application/front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/hcelante/workingon/distribuited_application/front/pages/components/github/index.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\n\nfunction getUser() {\n  return _getUser.apply(this, arguments);\n}\n\nfunction _getUser() {\n  _getUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var url, response, result;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            url = \"https://api.github.com/users/hcelante\";\n            _context.next = 3;\n            return fetch(url);\n\n          case 3:\n            response = _context.sent;\n            _context.next = 6;\n            return response.json();\n\n          case 6:\n            result = _context.sent;\n            return _context.abrupt(\"return\", result);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getUser.apply(this, arguments);\n}\n\nvar githubStyle = {\n  backgroundColor: 'white'\n};\nvar avatarStyle = {\n  width: '100px',\n  height: '100px',\n  backgroundColor: 'red',\n  position: 'relative',\n  //animationName: K,\n  animationDuration: '4s'\n};\n\nfunction GitHub() {\n  _s();\n\n  var _useState = useState(0),\n      charged = _useState[0],\n      setCharged = _useState[1];\n\n  var _useState2 = useState({}),\n      myGit = _useState2[0],\n      setMyGit = _useState2[1];\n\n  function getGit() {\n    getUser().then(function (response) {\n      setMyGit(response);\n    });\n  }\n\n  if (charged === 0) {\n    getGit();\n    setCharged(1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: githubStyle,\n    children: /*#__PURE__*/_jsxDEV(\"img\", {\n      className: 'shape-2',\n      src: myGit.avatar_url ? myGit.avatar_url : \"\",\n      alt: \"Higor Celante\",\n      style: {\n        borderRadius: '300px',\n        maxWidth: '10%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GitHub, \"eVrXeVD7oeh8UN6dIbK3kMBogUY=\");\n\n_c = GitHub;\nexport default GitHub;\n\nvar _c;\n\n$RefreshReg$(_c, \"GitHub\");","map":{"version":3,"sources":["/home/hcelante/workingon/distribuited_application/front/pages/components/github/index.js"],"names":["useState","getUser","url","fetch","response","json","result","githubStyle","backgroundColor","avatarStyle","width","height","position","animationDuration","GitHub","charged","setCharged","myGit","setMyGit","getGit","then","avatar_url","borderRadius","maxWidth"],"mappings":";;;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;;SAEeC,O;;;;;sEAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACUC,YAAAA,GADV,GACgB,uCADhB;AAAA;AAAA,mBAE2BC,KAAK,CAACD,GAAD,CAFhC;;AAAA;AAEUE,YAAAA,QAFV;AAAA;AAAA,mBAGyBA,QAAQ,CAACC,IAAT,EAHzB;;AAAA;AAGUC,YAAAA,MAHV;AAAA,6CAIWA,MAJX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAOA,IAAMC,WAAW,GAAG;AAChBC,EAAAA,eAAe,EAAE;AADD,CAApB;AAIA,IAAMC,WAAW,GAAG;AAChBC,EAAAA,KAAK,EAAE,OADS;AAEhBC,EAAAA,MAAM,EAAE,OAFQ;AAGhBH,EAAAA,eAAe,EAAE,KAHD;AAIhBI,EAAAA,QAAQ,EAAE,UAJM;AAKhB;AACAC,EAAAA,iBAAiB,EAAE;AANH,CAApB;;AAaA,SAASC,MAAT,GAAkB;AAAA;;AAAA,kBACgBd,QAAQ,CAAC,CAAD,CADxB;AAAA,MACPe,OADO;AAAA,MACEC,UADF;;AAAA,mBAEYhB,QAAQ,CAAC,EAAD,CAFpB;AAAA,MAEPiB,KAFO;AAAA,MAEAC,QAFA;;AAQd,WAASC,MAAT,GAAkB;AACdlB,IAAAA,OAAO,GAAGmB,IAAV,CAAe,UAAAhB,QAAQ,EAAI;AACvBc,MAAAA,QAAQ,CAACd,QAAD,CAAR;AACH,KAFD;AAGH;;AAED,MAAIW,OAAO,KAAK,CAAhB,EAAmB;AACfI,IAAAA,MAAM;AACNH,IAAAA,UAAU,CAAC,CAAD,CAAV;AACH;;AAED,sBACI;AAAK,IAAA,KAAK,EAAET,WAAZ;AAAA,2BACI;AAAK,MAAA,SAAS,EAAE,SAAhB;AAA2B,MAAA,GAAG,EAAEU,KAAK,CAACI,UAAN,GAAmBJ,KAAK,CAACI,UAAzB,GAAsC,EAAtE;AAA0E,MAAA,GAAG,EAAC,eAA9E;AAA8F,MAAA,KAAK,EAAE;AAAEC,QAAAA,YAAY,EAAE,OAAhB;AAAyBC,QAAAA,QAAQ,EAAE;AAAnC;AAArG;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH;;GAzBQT,M;;KAAAA,M;AAyBP,eAAeA,MAAf","sourcesContent":["import { useState } from 'react';\n\nasync function getUser() {\n    const url = \"https://api.github.com/users/hcelante\"\n    const response = await fetch(url)\n    const result = await response.json()\n    return result\n}\n\nconst githubStyle = {\n    backgroundColor: 'white'\n};\n\nconst avatarStyle = {\n    width: '100px',\n    height: '100px',\n    backgroundColor: 'red',\n    position: 'relative',\n    //animationName: K,\n    animationDuration: '4s'\n};\n\n\n\n\n\nfunction GitHub() {\n    const [charged, setCharged] = useState(0);\n    const [myGit, setMyGit] = useState({});\n\n\n\n\n\n    function getGit() {\n        getUser().then(response => {\n            setMyGit(response)\n        })\n    }\n\n    if (charged === 0) {\n        getGit()\n        setCharged(1)\n    }\n\n    return (\n        <div style={githubStyle}>\n            <img className={'shape-2'} src={myGit.avatar_url ? myGit.avatar_url : \"\"} alt=\"Higor Celante\" style={{ borderRadius: '300px', maxWidth: '10%' }} />\n        </div>\n    )\n\n} export default GitHub;\n"]},"metadata":{},"sourceType":"module"}