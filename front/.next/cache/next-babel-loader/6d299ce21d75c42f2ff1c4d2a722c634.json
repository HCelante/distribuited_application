{"ast":null,"code":"import _regeneratorRuntime from \"/home/hcelante/Documents/APS SD/distribuited_application/front/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/hcelante/Documents/APS SD/distribuited_application/front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/hcelante/Documents/APS SD/distribuited_application/front/pages/components/graph/index.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport Chart from \"react-google-charts\";\n\nfunction getData() {\n  return _getData.apply(this, arguments);\n}\n\nfunction _getData() {\n  _getData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var url, response, result;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            url = \"http://127.0.0.1:5000/\";\n            _context.next = 3;\n            return fetch(url);\n\n          case 3:\n            response = _context.sent;\n            _context.next = 6;\n            return response.json();\n\n          case 6:\n            result = _context.sent;\n            return _context.abrupt(\"return\", result);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getData.apply(this, arguments);\n}\n\nvar graphStyle = {\n  backgroundColor: 'white'\n};\n\nfunction Graph() {\n  _s();\n\n  var _useState = useState(0),\n      charged = _useState[0],\n      setCharged = _useState[1];\n\n  var _useState2 = useState({}),\n      myData = _useState2[0],\n      setMyData = _useState2[1];\n\n  var _useState3 = useState([]),\n      sentiments = _useState3[0],\n      setSentiments = _useState3[1];\n\n  function getGraph() {\n    getData().then(function (response) {\n      setMyData(response);\n      countSentiments(response);\n    });\n  }\n\n  function countSentiments(myData) {\n    var sentiment = [0, 0, 0];\n    myData.forEach(function (element) {\n      sentiment[element[0]] += 1;\n    });\n    setSentiments(sentiment);\n  }\n\n  if (charged === 0) {\n    getGraph();\n    setCharged(1);\n  }\n\n  console.log(sentiments);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: graphStyle,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"\",\n        children: /*#__PURE__*/_jsxDEV(Chart, {\n          width: '1000px',\n          height: '1000px',\n          chartType: \"PieChart\",\n          loader: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Carregando Gr\\xE1fico\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 29\n          }, this),\n          data: [['Sentimento', 'Tweets'], ['Positivo', sentiments[1]], ['Negativo', sentiments[0]], ['Neutro', sentiments[2]]],\n          options: {\n            title: 'Análise Sentimental de tweets sobre o personagem Luffy de One Piece',\n            // Just add this option\n            is3D: true\n          },\n          rootProps: {\n            'data-testid': '2'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Graph, \"kTLHW0nbD69e/38a2yyNa/lrYQI=\");\n\n_c = Graph;\nexport default Graph;\n\nvar _c;\n\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"sources":["/home/hcelante/Documents/APS SD/distribuited_application/front/pages/components/graph/index.js"],"names":["useState","Chart","getData","url","fetch","response","json","result","graphStyle","backgroundColor","Graph","charged","setCharged","myData","setMyData","sentiments","setSentiments","getGraph","then","countSentiments","sentiment","forEach","element","console","log","title","is3D"],"mappings":";;;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAQC,KAAR,MAAoB,qBAApB;;SAEeC,O;;;;;sEAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACUC,YAAAA,GADV,GACgB,wBADhB;AAAA;AAAA,mBAE2BC,KAAK,CAACD,GAAD,CAFhC;;AAAA;AAEUE,YAAAA,QAFV;AAAA;AAAA,mBAGyBA,QAAQ,CAACC,IAAT,EAHzB;;AAAA;AAGUC,YAAAA,MAHV;AAAA,6CAIWA,MAJX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAOA,IAAMC,UAAU,GAAG;AACfC,EAAAA,eAAe,EAAE;AADF,CAAnB;;AAIA,SAASC,KAAT,GAAiB;AAAA;;AAAA,kBACiBV,QAAQ,CAAC,CAAD,CADzB;AAAA,MACNW,OADM;AAAA,MACGC,UADH;;AAAA,mBAEeZ,QAAQ,CAAC,EAAD,CAFvB;AAAA,MAENa,MAFM;AAAA,MAEEC,SAFF;;AAAA,mBAGuBd,QAAQ,CAAC,EAAD,CAH/B;AAAA,MAGNe,UAHM;AAAA,MAGMC,aAHN;;AAMb,WAASC,QAAT,GAAoB;AAChBf,IAAAA,OAAO,GAAGgB,IAAV,CAAe,UAAAb,QAAQ,EAAI;AACvBS,MAAAA,SAAS,CAACT,QAAD,CAAT;AAEAc,MAAAA,eAAe,CAACd,QAAD,CAAf;AACH,KAJD;AAMH;;AAED,WAASc,eAAT,CAAyBN,MAAzB,EAAiC;AAC7B,QAAIO,SAAS,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAhB;AACAP,IAAAA,MAAM,CAACQ,OAAP,CAAe,UAAAC,OAAO,EAAI;AACtBF,MAAAA,SAAS,CAACE,OAAO,CAAC,CAAD,CAAR,CAAT,IAAyB,CAAzB;AACH,KAFD;AAGAN,IAAAA,aAAa,CAACI,SAAD,CAAb;AACH;;AAED,MAAIT,OAAO,KAAK,CAAhB,EAAmB;AACfM,IAAAA,QAAQ;AACRL,IAAAA,UAAU,CAAC,CAAD,CAAV;AACH;;AAEDW,EAAAA,OAAO,CAACC,GAAR,CAAYT,UAAZ;AACA,sBACI;AAAK,IAAA,KAAK,EAAEP,UAAZ;AAAA,2BACI;AAAA,6BACI;AAAK,QAAA,SAAS,EAAC,EAAf;AAAA,+BACA,QAAC,KAAD;AACI,UAAA,KAAK,EAAE,QADX;AAEI,UAAA,MAAM,EAAE,QAFZ;AAGI,UAAA,SAAS,EAAC,UAHd;AAII,UAAA,MAAM,eAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJZ;AAKI,UAAA,IAAI,EAAE,CACF,CAAC,YAAD,EAAe,QAAf,CADE,EAEF,CAAC,UAAD,EAAaO,UAAU,CAAC,CAAD,CAAvB,CAFE,EAGF,CAAC,UAAD,EAAaA,UAAU,CAAC,CAAD,CAAvB,CAHE,EAIF,CAAC,QAAD,EAAWA,UAAU,CAAC,CAAD,CAArB,CAJE,CALV;AAWI,UAAA,OAAO,EAAE;AACLU,YAAAA,KAAK,EAAE,qEADF;AAEL;AACAC,YAAAA,IAAI,EAAE;AAHD,WAXb;AAgBI,UAAA,SAAS,EAAE;AAAE,2BAAe;AAAjB;AAhBf;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AA2BH;;GAxDQhB,K;;KAAAA,K;AAwDP,eAAeA,KAAf","sourcesContent":["import { useState } from 'react';\nimport  Chart  from \"react-google-charts\";\n\nasync function getData() {\n    const url = \"http://127.0.0.1:5000/\"\n    const response = await fetch(url)\n    const result = await response.json()\n    return result\n}\n\nconst graphStyle = {\n    backgroundColor: 'white'\n};\n\nfunction Graph() {\n    const [charged, setCharged] = useState(0);\n    const [myData, setMyData] = useState({});\n    const [sentiments, setSentiments] = useState([]);\n\n\n    function getGraph() {\n        getData().then(response => {\n            setMyData(response)\n\n            countSentiments(response)\n        })\n\n    }\n\n    function countSentiments(myData) {\n        let sentiment = [0, 0, 0]\n        myData.forEach(element => {\n            sentiment[element[0]] += 1\n        });\n        setSentiments(sentiment)\n    }\n\n    if (charged === 0) {\n        getGraph()\n        setCharged(1)\n    }\n\n    console.log(sentiments)\n    return (\n        <div style={graphStyle}>\n            <div>\n                <div className=\"\">\n                <Chart\n                    width={'1000px'}\n                    height={'1000px'}\n                    chartType=\"PieChart\"\n                    loader={<div>Carregando Gráfico</div>}\n                    data={[\n                        ['Sentimento', 'Tweets'],\n                        ['Positivo', sentiments[1]],\n                        ['Negativo', sentiments[0]],\n                        ['Neutro', sentiments[2]],\n                    ]}\n                    options={{\n                        title: 'Análise Sentimental de tweets sobre o personagem Luffy de One Piece',\n                        // Just add this option\n                        is3D: true,\n                    }}\n                    rootProps={{ 'data-testid': '2' }}\n                ></Chart>\n                </div>\n            </div>\n        </div>\n    )\n\n} export default Graph;\n"]},"metadata":{},"sourceType":"module"}