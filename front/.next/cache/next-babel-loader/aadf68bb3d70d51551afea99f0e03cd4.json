{"ast":null,"code":"import _regeneratorRuntime from \"/home/hcelante/workingon/distribuited_application/front/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/hcelante/workingon/distribuited_application/front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/hcelante/workingon/distribuited_application/front/pages/components/graph/index.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\n\nfunction getData() {\n  return _getData.apply(this, arguments);\n}\n\nfunction _getData() {\n  _getData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var url, response, result;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            url = \"http://127.0.0.1:5000/\";\n            _context.next = 3;\n            return fetch(url);\n\n          case 3:\n            response = _context.sent;\n            console.log(response);\n            _context.next = 7;\n            return response;\n\n          case 7:\n            result = _context.sent;\n            return _context.abrupt(\"return\", result);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getData.apply(this, arguments);\n}\n\nvar graphStyle = {\n  backgroundColor: 'white'\n};\n\nfunction Graph() {\n  _s();\n\n  var _useState = useState(0),\n      charged = _useState[0],\n      setCharged = _useState[1];\n\n  var _useState2 = useState({}),\n      myData = _useState2[0],\n      setMyData = _useState2[1];\n\n  function getGraph() {\n    getData().then(function (response) {\n      setMyData(response);\n    });\n  }\n\n  if (charged === 0) {\n    getGraph();\n    setCharged(1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: graphStyle,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"aaaaaaaaaaaaaaaa\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Graph, \"49MAp+p6FjpJ/NALn3cf+QsI3k0=\");\n\n_c = Graph;\nexport default Graph;\n\nvar _c;\n\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"sources":["/home/hcelante/workingon/distribuited_application/front/pages/components/graph/index.js"],"names":["useState","getData","url","fetch","response","console","log","result","graphStyle","backgroundColor","Graph","charged","setCharged","myData","setMyData","getGraph","then"],"mappings":";;;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;;SAEeC,O;;;;;sEAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACUC,YAAAA,GADV,GACgB,wBADhB;AAAA;AAAA,mBAE2BC,KAAK,CAACD,GAAD,CAFhC;;AAAA;AAEUE,YAAAA,QAFV;AAGIC,YAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AAHJ;AAAA,mBAIyBA,QAJzB;;AAAA;AAIUG,YAAAA,MAJV;AAAA,6CAKWA,MALX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AASA,IAAMC,UAAU,GAAG;AACfC,EAAAA,eAAe,EAAE;AADF,CAAnB;;AAIA,SAASC,KAAT,GAAiB;AAAA;;AAAA,kBACiBV,QAAQ,CAAC,CAAD,CADzB;AAAA,MACNW,OADM;AAAA,MACGC,UADH;;AAAA,mBAEeZ,QAAQ,CAAC,EAAD,CAFvB;AAAA,MAENa,MAFM;AAAA,MAEEC,SAFF;;AAIb,WAASC,QAAT,GAAoB;AAChBd,IAAAA,OAAO,GAAGe,IAAV,CAAe,UAAAZ,QAAQ,EAAI;AACvBU,MAAAA,SAAS,CAACV,QAAD,CAAT;AACH,KAFD;AAGH;;AAED,MAAIO,OAAO,KAAK,CAAhB,EAAmB;AACfI,IAAAA,QAAQ;AACRH,IAAAA,UAAU,CAAC,CAAD,CAAV;AACH;;AAED,sBACI;AAAK,IAAA,KAAK,EAAEJ,UAAZ;AAAA,2BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH;;GAvBQE,K;;KAAAA,K;AAuBP,eAAeA,KAAf","sourcesContent":["import { useState } from 'react';\n\nasync function getData() {\n    const url = \"http://127.0.0.1:5000/\"\n    const response = await fetch(url)\n    console.log(response)\n    const result = await response//.json()\n    return result\n}\n\n\nconst graphStyle = {\n    backgroundColor: 'white'\n};\n\nfunction Graph() {\n    const [charged, setCharged] = useState(0);\n    const [myData, setMyData] = useState({});\n\n    function getGraph() {\n        getData().then(response => {\n            setMyData(response)\n        })\n    }\n\n    if (charged === 0) {\n        getGraph()\n        setCharged(1)\n    }\n\n    return (\n        <div style={graphStyle}>\n            <div>\n                aaaaaaaaaaaaaaaa\n            </div>\n        </div>\n    )\n\n} export default Graph;\n"]},"metadata":{},"sourceType":"module"}