{"ast":null,"code":"import _regeneratorRuntime from \"/home/hcelante/Documents/APS SD/distribuited_application/front/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/hcelante/Documents/APS SD/distribuited_application/front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/hcelante/Documents/APS SD/distribuited_application/front/pages/components/graph/index.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport Chart from \"react-google-charts\";\n\nfunction getData() {\n  return _getData.apply(this, arguments);\n}\n\nfunction _getData() {\n  _getData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var url, response, result;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            url = \"http://127.0.0.1:5000/\";\n            _context.next = 3;\n            return fetch(url);\n\n          case 3:\n            response = _context.sent;\n            _context.next = 6;\n            return response.json();\n\n          case 6:\n            result = _context.sent;\n            return _context.abrupt(\"return\", result);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getData.apply(this, arguments);\n}\n\nvar graphStyle = {\n  backgroundColor: 'white'\n};\n\nfunction Graph() {\n  _s();\n\n  var _useState = useState(0),\n      charged = _useState[0],\n      setCharged = _useState[1];\n\n  var _useState2 = useState({}),\n      myData = _useState2[0],\n      setMyData = _useState2[1];\n\n  var _useState3 = useState([]),\n      sentiments = _useState3[0],\n      setSentiments = _useState3[1];\n\n  var _useState4 = useState(0),\n      value = _useState4[0],\n      setValue = _useState4[1];\n\n  function getGraph() {\n    getData().then(function (response) {\n      setMyData(response);\n      countSentiments(response);\n    });\n  }\n\n  function countSentiments(myData) {\n    var sentiment = [0, 0, 0];\n    myData.forEach(function (element) {\n      sentiment[element[0]] += 1;\n    });\n    setSentiments(sentiment);\n  }\n\n  if (charged === 0) {\n    getGraph();\n    setCharged(1);\n  }\n\n  console.log(sentiments);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"N\\xFAmero de Tweets que deseja buscar:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: value,\n        onChange: function onChange(e) {\n          return setValue(e.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: function onClick() {},\n        children: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: graphStyle,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"\",\n          children: /*#__PURE__*/_jsxDEV(Chart, {\n            width: '1000px',\n            height: '1000px',\n            chartType: \"PieChart\",\n            loader: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"Carregando Gr\\xE1fico\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 37\n            }, this),\n            data: [['Sentimento', 'Tweets'], ['Positivo', sentiments[1]], ['Negativo', sentiments[0]], ['Neutro', sentiments[2]]],\n            options: {\n              title: 'Análise Sentimental de tweets sobre o personagem Luffy de One Piece',\n              // Just add this option\n              is3D: true\n            },\n            rootProps: {\n              'data-testid': '2'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Graph, \"huQXfhXezTi1UvZ0rKkh+xBHit4=\");\n\n_c = Graph;\nexport default Graph;\n\nvar _c;\n\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"sources":["/home/hcelante/Documents/APS SD/distribuited_application/front/pages/components/graph/index.js"],"names":["useState","Chart","getData","url","fetch","response","json","result","graphStyle","backgroundColor","Graph","charged","setCharged","myData","setMyData","sentiments","setSentiments","value","setValue","getGraph","then","countSentiments","sentiment","forEach","element","console","log","e","target","title","is3D"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport Chart from \"react-google-charts\";\n\nasync function getData() {\n    const url = \"http://127.0.0.1:5000/\"\n    const response = await fetch(url)\n    const result = await response.json()\n    return result\n}\n\nconst graphStyle = {\n    backgroundColor: 'white'\n};\n\nfunction Graph() {\n    const [charged, setCharged] = useState(0);\n    const [myData, setMyData] = useState({});\n    const [sentiments, setSentiments] = useState([]);\n    const [value, setValue] = useState(0);\n\n    function getGraph() {\n        getData().then(response => {\n            setMyData(response)\n\n            countSentiments(response)\n        })\n\n    }\n\n    function countSentiments(myData) {\n        let sentiment = [0, 0, 0]\n        myData.forEach(element => {\n            sentiment[element[0]] += 1\n        });\n        setSentiments(sentiment)\n    }\n\n    if (charged === 0) {\n        getGraph()\n        setCharged(1)\n    }\n\n    console.log(sentiments)\n    return (\n        <div>\n            <label>\n                Número de Tweets que deseja buscar:\n                <input type=\"text\" value={value} onChange={e =>  setValue(e.target.value)} />\n            </label>\n            <div>\n                <button onClick={() => {}}>\n                    Update\n                </button>\n            </div>\n            <div style={graphStyle}>\n                <div>\n                    <div className=\"\">\n                        <Chart\n                            width={'1000px'}\n                            height={'1000px'}\n                            chartType=\"PieChart\"\n                            loader={<div>Carregando Gráfico</div>}\n                            data={[\n                                ['Sentimento', 'Tweets'],\n                                ['Positivo', sentiments[1]],\n                                ['Negativo', sentiments[0]],\n                                ['Neutro', sentiments[2]],\n                            ]}\n                            options={{\n                                title: 'Análise Sentimental de tweets sobre o personagem Luffy de One Piece',\n                                // Just add this option\n                                is3D: true,\n                            }}\n                            rootProps={{ 'data-testid': '2' }}\n                        ></Chart>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n\n} export default Graph;\n"]},"metadata":{},"sourceType":"module"}